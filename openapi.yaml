openapi: 3.0.3
info:
  title: Go Hexagonal Fullstack Monorepo API
  description: API specification for the Go hexagonal architecture monorepo
  version: 1.0.0
  contact:
    name: Tech Forge LAT
    url: https://github.com/techforge-lat/go-hexagonal-fullstack-monorepo
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server

paths:
  /users:
    post:
      summary: Create a new user
      description: Creates a new user with the provided information
      operationId: createUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateRequest"
            examples:
              basic_user:
                summary: Basic user creation
                value:
                  id: "123e4567-e89b-12d3-a456-426614174000"
                  firstName: "John"
                  lastName: "Doe"
                  origin: "web_signup"
                  picture: "https://example.com/avatar.jpg"
                  createdAt: "2023-01-01T00:00:00Z"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  summary: Successful creation
                  value:
                    type: "about:blank"
                    title: "Recurso Creado"
                    detail: "El recurso fue creado exitosamente"
                    status: 201
                    data:
                      id: "123e4567-e89b-12d3-a456-426614174000"
                      firstName: "John"
                      lastName: "Doe"
                      origin: "web_signup"
                      picture: "https://example.com/avatar.jpg"
        "400":
          $ref: "#/components/responses/BadRequest"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalError"

    get:
      summary: List users
      description: Retrieves a list of users with optional filtering, sorting, and pagination
      operationId: listUsers
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/SelectParam"
        - $ref: "#/components/parameters/PaginationParam"
        - name: firstName
          in: query
          description: "Filter by firstName OR Sort by firstName. Filter format: operator:value[:chaining]. Sort format: sort:direction. Operators: eq, ne, gt, gte, lt, lte, like, in, nin, contains, ncontains, is, isn. Chaining: and (default), or. Direction: asc, desc"
          schema:
            type: string
            example: "eq:John"
        - name: lastName
          in: query
          description: "Filter by lastName OR Sort by lastName. Filter format: operator:value[:chaining]. Sort format: sort:direction. Operators: eq, ne, gt, gte, lt, lte, like, in, nin, contains, ncontains, is, isn. Chaining: and (default), or. Direction: asc, desc"
          schema:
            type: string
            example: "eq:Doe"
        - name: origin
          in: query
          description: "Filter by origin OR Sort by origin. Filter format: operator:value[:chaining]. Sort format: sort:direction. Operators: eq, ne, gt, gte, lt, lte, like, in, nin, contains, ncontains, is, isn. Chaining: and (default), or. Direction: asc, desc"
          schema:
            type: string
            example: "in:web_signup,mobile_app"
        - name: picture
          in: query
          description: "Filter by picture OR Sort by picture. Filter format: operator:value[:chaining]. Sort format: sort:direction. Operators: eq, ne, gt, gte, lt, lte, like, in, nin, contains, ncontains, is, isn. Chaining: and (default), or. Direction: asc, desc"
          schema:
            type: string
            example: "contains:avatar"
        - name: createdAt
          in: query
          description: "Filter by createdAt OR Sort by createdAt. Filter format: operator:value[:chaining]. Sort format: sort:direction. Operators: eq, ne, gt, gte, lt, lte, like, in, nin, contains, ncontains, is, isn. Chaining: and (default), or. Direction: asc, desc"
          schema:
            type: string
            example: "gte:2023-01-01T00:00:00Z"
      responses:
        "200":
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  summary: Successful list
                  value:
                    type: "about:blank"
                    status: 200
                    data:
                      - id: "123e4567-e89b-12d3-a456-426614174000"
                        firstName: "John"
                        lastName: "Doe"
                        origin: "web_signup"
                        createdAt: "2023-01-01T00:00:00Z"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalError"

  /users/{id}:
    get:
      summary: Get user by ID
      description: Retrieves a specific user by their ID
      operationId: getUser
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
        - $ref: "#/components/parameters/SelectParam"
      responses:
        "200":
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  summary: Successful retrieval
                  value:
                    type: "about:blank"
                    status: 200
                    data:
                      id: "123e4567-e89b-12d3-a456-426614174000"
                      firstName: "John"
                      lastName: "Doe"
                      origin: "web_signup"
                      picture: "https://example.com/avatar.jpg"
                      createdAt: "2023-01-01T00:00:00Z"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"

    patch:
      summary: Update user
      description: Updates an existing user with the provided information
      operationId: updateUser
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
            examples:
              partial_update:
                summary: Partial user update
                value:
                  firstName: "Jane"
                  lastName: null
                  origin: null
                  picture: "https://example.com/new-avatar.jpg"
                  updatedAt: "2023-01-02T00:00:00Z"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  summary: Successful update
                  value:
                    type: "about:blank"
                    status: 200
                    data:
                      firstName: "Jane"
                      lastName: null
                      origin: null
                      picture: "https://example.com/new-avatar.jpg"
                      updatedAt: "2023-01-02T00:00:00Z"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalError"

    delete:
      summary: Delete user
      description: Soft deletes a user by their ID
      operationId: deleteUser
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "204":
          description: User deleted successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"

  /users-origin-enum:
    post:
      summary: Create a new users origin enum
      description: Creates a new users origin enum with the provided information
      operationId: createUsersOriginEnum
      tags:
        - UsersOriginEnum
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsersOriginEnumCreateRequest"
            examples:
              basic_users_origin_enum:
                summary: Basic users origin enum creation
                value:
                  code: "web_signup"
                  name: "Web Signup"
      responses:
        "201":
          description: Users origin enum created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  summary: Successful creation
                  value:
                    type: "about:blank"
                    title: "Recurso Creado"
                    detail: "El recurso fue creado exitosamente"
                    status: 201
                    data:
                      code: "web_signup"
                      name: "Web Signup"
        "400":
          $ref: "#/components/responses/BadRequest"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalError"

    get:
      summary: List users origin enums
      description: Retrieves a list of users origin enums with optional filtering, sorting, and pagination
      operationId: listUsersOriginEnums
      tags:
        - UsersOriginEnum
      parameters:
        - $ref: "#/components/parameters/SelectParam"
        - $ref: "#/components/parameters/PaginationParam"
        - name: code
          in: query
          description: "Filter by code OR Sort by code. Filter format: operator:value[:chaining]. Sort format: sort:direction. Operators: eq, ne, gt, gte, lt, lte, like, in, nin, contains, ncontains, is, isn. Chaining: and (default), or. Direction: asc, desc"
          schema:
            type: string
            example: "eq:web_signup"
        - name: name
          in: query
          description: "Filter by name OR Sort by name. Filter format: operator:value[:chaining]. Sort format: sort:direction. Operators: eq, ne, gt, gte, lt, lte, like, in, nin, contains, ncontains, is, isn. Chaining: and (default), or. Direction: asc, desc"
          schema:
            type: string
            example: "contains:Web"
      responses:
        "200":
          description: List of users origin enums retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  summary: Successful list
                  value:
                    type: "about:blank"
                    status: 200
                    data:
                      - code: "web_signup"
                        name: "Web Signup"
                      - code: "mobile_app"
                        name: "Mobile App"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalError"

  /users-origin-enum/{code}:
    get:
      summary: Get users origin enum by code
      description: Retrieves a specific users origin enum by their code
      operationId: getUsersOriginEnum
      tags:
        - UsersOriginEnum
      parameters:
        - name: code
          in: path
          required: true
          description: Users origin enum code
          schema:
            type: string
            example: "web_signup"
        - $ref: "#/components/parameters/SelectParam"
      responses:
        "200":
          description: Users origin enum retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  summary: Successful retrieval
                  value:
                    type: "about:blank"
                    status: 200
                    data:
                      code: "web_signup"
                      name: "Web Signup"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"

    patch:
      summary: Update users origin enum
      description: Updates an existing users origin enum with the provided information
      operationId: updateUsersOriginEnum
      tags:
        - UsersOriginEnum
      parameters:
        - name: code
          in: path
          required: true
          description: Users origin enum code
          schema:
            type: string
            example: "web_signup"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsersOriginEnumUpdateRequest"
            examples:
              partial_update:
                summary: Partial users origin enum update
                value:
                  code: "web_registration"
                  name: "Web Registration"
      responses:
        "200":
          description: Users origin enum updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  summary: Successful update
                  value:
                    type: "about:blank"
                    status: 200
                    data:
                      code: "web_registration"
                      name: "Web Registration"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalError"

    delete:
      summary: Delete users origin enum
      description: Soft deletes a users origin enum by their code
      operationId: deleteUsersOriginEnum
      tags:
        - UsersOriginEnum
      parameters:
        - name: code
          in: path
          required: true
          description: Users origin enum code
          schema:
            type: string
            example: "web_signup"
      responses:
        "204":
          description: Users origin enum deleted successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"

  /email-credentials:
    post:
      summary: Create a new email credentials
      description: Creates a new email credentials with the provided information
      operationId: createEmailCredentials
      tags:
        - EmailCredentials
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailCredentialsCreateRequest"
            examples:
              basic_email_credentials:
                summary: Basic email credentials creation
                value:
                  id: "123e4567-e89b-12d3-a456-426614174000"
                  userId: "456e7890-e89b-12d3-a456-426614174000"
                  email: "user@example.com"
                  passwordHash: "$2a$10$..."
                  isVerified: false
                  createdAt: "2023-01-01T00:00:00Z"
      responses:
        "201":
          description: Email credentials created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  summary: Successful creation
                  value:
                    type: "about:blank"
                    title: "Recurso Creado"
                    detail: "El recurso fue creado exitosamente"
                    status: 201
                    data:
                      id: "123e4567-e89b-12d3-a456-426614174000"
                      userId: "456e7890-e89b-12d3-a456-426614174000"
                      email: "user@example.com"
                      isVerified: false
                      createdAt: "2023-01-01T00:00:00Z"
        "400":
          $ref: "#/components/responses/BadRequest"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalError"

    get:
      summary: List email credentials
      description: Retrieves a list of email credentials with optional filtering, sorting, and pagination
      operationId: listEmailCredentials
      tags:
        - EmailCredentials
      parameters:
        - $ref: "#/components/parameters/SelectParam"
        - $ref: "#/components/parameters/PaginationParam"
        - name: userId
          in: query
          description: "Filter by userId OR Sort by userId. Filter format: operator:value[:chaining]. Sort format: sort:direction. Operators: eq, ne, gt, gte, lt, lte, like, in, nin, contains, ncontains, is, isn. Chaining: and (default), or. Direction: asc, desc"
          schema:
            type: string
            example: "eq:456e7890-e89b-12d3-a456-426614174000"
        - name: email
          in: query
          description: "Filter by email OR Sort by email. Filter format: operator:value[:chaining]. Sort format: sort:direction. Operators: eq, ne, gt, gte, lt, lte, like, in, nin, contains, ncontains, is, isn. Chaining: and (default), or. Direction: asc, desc"
          schema:
            type: string
            example: "contains:example.com"
        - name: isVerified
          in: query
          description: "Filter by isVerified OR Sort by isVerified. Filter format: operator:value[:chaining]. Sort format: sort:direction. Operators: eq, ne, gt, gte, lt, lte, like, in, nin, contains, ncontains, is, isn. Chaining: and (default), or. Direction: asc, desc"
          schema:
            type: string
            example: "eq:true"
        - name: createdAt
          in: query
          description: "Filter by createdAt OR Sort by createdAt. Filter format: operator:value[:chaining]. Sort format: sort:direction. Operators: eq, ne, gt, gte, lt, lte, like, in, nin, contains, ncontains, is, isn. Chaining: and (default), or. Direction: asc, desc"
          schema:
            type: string
            example: "gte:2023-01-01T00:00:00Z"
        - name: updatedAt
          in: query
          description: "Filter by updatedAt OR Sort by updatedAt. Filter format: operator:value[:chaining]. Sort format: sort:direction. Operators: eq, ne, gt, gte, lt, lte, like, in, nin, contains, ncontains, is, isn. Chaining: and (default), or. Direction: asc, desc"
          schema:
            type: string
            example: "gte:2023-01-01T00:00:00Z"
      responses:
        "200":
          description: List of email credentials retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  summary: Successful list
                  value:
                    type: "about:blank"
                    status: 200
                    data:
                      - id: "123e4567-e89b-12d3-a456-426614174000"
                        userId: "456e7890-e89b-12d3-a456-426614174000"
                        email: "user@example.com"
                        isVerified: true
                        createdAt: "2023-01-01T00:00:00Z"
                      - id: "789e0123-e89b-12d3-a456-426614174000"
                        userId: "012e3456-e89b-12d3-a456-426614174000"
                        email: "user2@example.com"
                        isVerified: false
                        createdAt: "2023-01-02T00:00:00Z"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalError"

  /email-credentials/{id}:
    get:
      summary: Get email credentials by ID
      description: Retrieves specific email credentials by their ID
      operationId: getEmailCredentials
      tags:
        - EmailCredentials
      parameters:
        - name: id
          in: path
          required: true
          description: Email credentials ID
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
        - $ref: "#/components/parameters/SelectParam"
      responses:
        "200":
          description: Email credentials retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  summary: Successful retrieval
                  value:
                    type: "about:blank"
                    status: 200
                    data:
                      id: "123e4567-e89b-12d3-a456-426614174000"
                      userId: "456e7890-e89b-12d3-a456-426614174000"
                      email: "user@example.com"
                      isVerified: true
                      createdAt: "2023-01-01T00:00:00Z"
                      updatedAt: "2023-01-02T00:00:00Z"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"

    patch:
      summary: Update email credentials
      description: Updates existing email credentials with the provided information
      operationId: updateEmailCredentials
      tags:
        - EmailCredentials
      parameters:
        - name: id
          in: path
          required: true
          description: Email credentials ID
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailCredentialsUpdateRequest"
            examples:
              partial_update:
                summary: Partial email credentials update
                value:
                  email: "newemail@example.com"
                  isVerified: true
                  updatedAt: "2023-01-02T00:00:00Z"
      responses:
        "200":
          description: Email credentials updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  summary: Successful update
                  value:
                    type: "about:blank"
                    status: 200
                    data:
                      email: "newemail@example.com"
                      isVerified: true
                      updatedAt: "2023-01-02T00:00:00Z"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalError"

    delete:
      summary: Delete email credentials
      description: Deletes email credentials by their ID
      operationId: deleteEmailCredentials
      tags:
        - EmailCredentials
      parameters:
        - name: id
          in: path
          required: true
          description: Email credentials ID
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "204":
          description: Email credentials deleted successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"

components:
  schemas:
    User:
      type: object
      description: User entity with all fields
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
          example: "123e4567-e89b-12d3-a456-426614174000"
        firstName:
          type: string
          description: User's first name
          minLength: 3
          maxLength: 50
          example: "John"
        lastName:
          type: string
          nullable: true
          description: User's last name (optional)
          maxLength: 50
          example: "Doe"
        origin:
          type: string
          description: Origin of user registration
          minLength: 3
          maxLength: 30
          example: "web_signup"
        picture:
          type: string
          nullable: true
          description: User's profile picture URL
          example: "https://example.com/avatar.jpg"
        createdAt:
          type: string
          format: date-time
          description: Timestamp when user was created
          example: "2023-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when user was last updated
          example: "2023-01-02T00:00:00Z"
        deletedAt:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when user was deleted (soft delete)
          example: "2023-01-03T00:00:00Z"
      required:
        - id
        - firstName
        - origin
        - createdAt

    UserCreateRequest:
      type: object
      description: Request payload for creating a new user
      properties:
        id:
          type: string
          format: uuid
          description: User ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        firstName:
          type: string
          description: User's first name
          minLength: 3
          maxLength: 50
          example: "John"
        lastName:
          type: string
          nullable: true
          description: User's last name (optional)
          maxLength: 50
          example: "Doe"
        origin:
          type: string
          description: Origin of user registration
          minLength: 3
          maxLength: 30
          example: "web_signup"
        picture:
          type: string
          nullable: true
          description: User's profile picture URL
          example: "https://example.com/avatar.jpg"
        createdAt:
          type: string
          format: date-time
          nullable: true
          description: Creation timestamp
          example: "2023-01-01T00:00:00Z"
      required:
        - firstName
        - origin

    UserUpdateRequest:
      type: object
      description: Request payload for updating a user
      properties:
        firstName:
          type: string
          nullable: true
          description: User's first name
          minLength: 3
          maxLength: 50
          example: "Jane"
        lastName:
          type: string
          nullable: true
          description: User's last name
          maxLength: 50
          example: "Smith"
        origin:
          type: string
          nullable: true
          description: Origin of user registration
          minLength: 3
          maxLength: 30
          example: "mobile_app"
        picture:
          type: string
          nullable: true
          description: User's profile picture URL
          example: "https://example.com/new-avatar.jpg"
        updatedAt:
          type: string
          format: date-time
          nullable: true
          description: Update timestamp
          example: "2023-01-02T00:00:00Z"

    UsersOriginEnum:
      type: object
      description: Users origin enum entity with all fields
      properties:
        code:
          type: string
          description: Unique code identifier for the origin type
          minLength: 1
          maxLength: 50
          example: "web_signup"
        name:
          type: string
          description: Human-readable name for the origin type
          minLength: 1
          maxLength: 100
          example: "Web Signup"
      required:
        - code
        - name

    UsersOriginEnumCreateRequest:
      type: object
      description: Request payload for creating a new users origin enum
      properties:
        code:
          type: string
          description: Unique code identifier for the origin type
          minLength: 1
          maxLength: 50
          example: "web_signup"
        name:
          type: string
          description: Human-readable name for the origin type
          minLength: 1
          maxLength: 100
          example: "Web Signup"
      required:
        - code
        - name

    UsersOriginEnumUpdateRequest:
      type: object
      description: Request payload for updating a users origin enum
      properties:
        code:
          type: string
          nullable: true
          description: Unique code identifier for the origin type
          minLength: 1
          maxLength: 50
          example: "web_registration"
        name:
          type: string
          nullable: true
          description: Human-readable name for the origin type
          minLength: 1
          maxLength: 100
          example: "Web Registration"

    EmailCredentials:
      type: object
      description: Email credentials entity with all fields
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the email credentials
          example: "123e4567-e89b-12d3-a456-426614174000"
        userId:
          type: string
          format: uuid
          description: Reference to the user
          example: "456e7890-e89b-12d3-a456-426614174000"
        email:
          type: string
          description: Email address of the user
          minLength: 1
          maxLength: 255
          example: "user@example.com"
        passwordHash:
          type: string
          nullable: true
          description: Hashed password for email authentication
          maxLength: 255
          example: "$2a$10$..."
        isVerified:
          type: boolean
          description: Whether the email address has been verified
          example: false
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the email credential was created
          example: "2023-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when the email credential was last updated
          example: "2023-01-02T00:00:00Z"
      required:
        - id
        - userId
        - email
        - isVerified
        - createdAt

    EmailCredentialsCreateRequest:
      type: object
      description: Request payload for creating new email credentials
      properties:
        id:
          type: string
          format: uuid
          description: Email credentials ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        userId:
          type: string
          format: uuid
          description: Reference to the user
          example: "456e7890-e89b-12d3-a456-426614174000"
        email:
          type: string
          description: Email address of the user
          minLength: 1
          maxLength: 255
          example: "user@example.com"
        passwordHash:
          type: string
          nullable: true
          description: Hashed password for email authentication
          maxLength: 255
          example: "$2a$10$..."
        isVerified:
          type: boolean
          description: Whether the email address has been verified
          example: false
        createdAt:
          type: string
          format: date-time
          nullable: true
          description: Creation timestamp
          example: "2023-01-01T00:00:00Z"
      required:
        - userId
        - email

    EmailCredentialsUpdateRequest:
      type: object
      description: Request payload for updating email credentials
      properties:
        userId:
          type: string
          format: uuid
          nullable: true
          description: Reference to the user
          example: "456e7890-e89b-12d3-a456-426614174000"
        email:
          type: string
          nullable: true
          description: Email address of the user
          minLength: 1
          maxLength: 255
          example: "newemail@example.com"
        passwordHash:
          type: string
          nullable: true
          description: Hashed password for email authentication
          maxLength: 255
          example: "$2a$10$..."
        isVerified:
          type: boolean
          nullable: true
          description: Whether the email address has been verified
          example: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
          description: Update timestamp
          example: "2023-01-02T00:00:00Z"

    ApiResponse:
      type: object
      description: Standard API response following RFC 9457 Problem Details
      properties:
        type:
          type: string
          description: Problem type URI
          example: "about:blank"
        title:
          type: string
          description: Problem title
          example: "Recurso Creado"
        detail:
          type: string
          description: Problem detail
          example: "El recurso fue creado exitosamente"
        status:
          type: integer
          description: HTTP status code
          example: 201
        instance:
          type: string
          description: Problem instance URI
          example: "/users/123"
        data:
          description: Response data (varies by endpoint)
          oneOf:
            - $ref: "#/components/schemas/User"
            - type: array
              items:
                $ref: "#/components/schemas/User"
            - $ref: "#/components/schemas/UserCreateRequest"
            - $ref: "#/components/schemas/UserUpdateRequest"
            - $ref: "#/components/schemas/UsersOriginEnum"
            - type: array
              items:
                $ref: "#/components/schemas/UsersOriginEnum"
            - $ref: "#/components/schemas/UsersOriginEnumCreateRequest"
            - $ref: "#/components/schemas/UsersOriginEnumUpdateRequest"
            - $ref: "#/components/schemas/EmailCredentials"
            - type: array
              items:
                $ref: "#/components/schemas/EmailCredentials"
            - $ref: "#/components/schemas/EmailCredentialsCreateRequest"
            - $ref: "#/components/schemas/EmailCredentialsUpdateRequest"

    ErrorResponse:
      type: object
      description: Error response following RFC 9457 Problem Details
      properties:
        type:
          type: string
          description: Problem type URI
          example: "about:blank"
        title:
          type: string
          description: Error title
          example: "Solicitud Incorrecta"
        detail:
          type: string
          description: Error detail
          example: "La solicitud es inválida o está mal formada"
        status:
          type: integer
          description: HTTP status code
          example: 400
        instance:
          type: string
          description: Problem instance URI
          example: "/users"
        debug_error:
          type: string
          description: Debug error information (development only)
          example: "validation failed: firstName is required"
        error_code:
          type: string
          description: Application-specific error code
          example: "VALIDATION_FAILED"

  parameters:
    SelectParam:
      name: select
      in: query
      description: |
        Comma-separated list of fields to include in the response.
        Use "*" to select all fields.
      schema:
        type: string
        example: "id,firstName,lastName"

    PaginationParam:
      name: x
      in: query
      description: |
        Pagination parameters. Format: page:number or limit:size
        Controls page number and page size for results.
        Multiple x parameters can be provided for different pagination settings.
        
        **Examples**:
        - `x=page:1` - Get page 1
        - `x=limit:10` - 10 items per page
        - Multiple: `x=page:2&x=limit:20` - Page 2 with 20 items
      schema:
        type: array
        items:
          type: string
          enum: 
            - "page:1"
            - "page:2"
            - "limit:10"
            - "limit:20"
            - "limit:50"
        example: ["page:1", "limit:10"]

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            bad_request:
              summary: Invalid request
              value:
                type: "about:blank"
                title: "Solicitud Incorrecta"
                detail: "La solicitud es inválida o está mal formada"
                status: 400

    NotFound:
      description: Resource Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            not_found:
              summary: Resource not found
              value:
                type: "about:blank"
                title: "Recurso No Encontrado"
                detail: "El recurso solicitado no pudo ser encontrado"
                status: 404

    ValidationError:
      description: Validation Failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            validation_error:
              summary: Validation failed
              value:
                type: "about:blank"
                title: "Validación Fallida"
                detail: "Los datos proporcionados no cumplen con los requisitos de validación"
                status: 422
                debug_error: "firstName: This field is required"

    InternalError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            internal_error:
              summary: Server error
              value:
                type: "about:blank"
                title: "Error Interno del Servidor"
                detail: "Ocurrió un error inesperado en el servidor"
                status: 500

tags:
  - name: Users
    description: User management operations
  - name: UsersOriginEnum
    description: Users origin enum management operations
  - name: EmailCredentials
    description: Email credentials management operations